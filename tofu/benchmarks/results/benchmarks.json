{
    "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_camlos1d": {
        "code": "class HighLevel:\n    def peakmem_camlos1d(self, out):\n        cam = tf.geom.utils.create_CamLOS1D(config=self.conf, **out[0])\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n        return dcam1d, dcam2d, dpart",
        "name": "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_camlos1d",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/home/didier/Documents/Projects/tofu/tofu/benchmarks/benchmarks_00_Geometry_peakmem.py:39",
        "timeout": 30,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "2bb5d7d52d68a937f15e7d707e14a2ae41c19959cbe2460f302176f8c9d33386"
    },
    "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_camlos2d": {
        "code": "class HighLevel:\n    def peakmem_camlos2d(self, out):\n        cam = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n        return dcam1d, dcam2d, dpart",
        "name": "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_camlos2d",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/home/didier/Documents/Projects/tofu/tofu/benchmarks/benchmarks_00_Geometry_peakmem.py:39",
        "timeout": 30,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "0ca8580cfb0b17ef03bb712b73d2bdaec01a63ad29ba048f3a4368f660a72b23"
    },
    "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_solidangle_part": {
        "code": "class HighLevel:\n    def peakmem_solidangle_part(self, out):\n        (\n            ptsRZ, sang, indices, reseff,\n        ) = self.conf.calc_solidangle_particle_integrated(**out[2])\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n        return dcam1d, dcam2d, dpart",
        "name": "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_solidangle_part",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/home/didier/Documents/Projects/tofu/tofu/benchmarks/benchmarks_00_Geometry_peakmem.py:39",
        "timeout": 30,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "ce45d73facaa5de8421351800f83397745714af017abe47ac6839148ceaeb54c"
    },
    "benchmarks_00_Geometry_time.HighLevel.time_camlos1d": {
        "code": "class HighLevel:\n    def time_camlos1d(self, out):\n        cam = tf.geom.utils.create_CamLOS1D(config=self.conf, **out[0])\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n        return dcam1d, dcam2d, dpart",
        "min_run_count": 2,
        "name": "benchmarks_00_Geometry_time.HighLevel.time_camlos1d",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.1,
        "setup_cache_key": "/home/didier/Documents/Projects/tofu/tofu/benchmarks/benchmarks_00_Geometry_time.py:39",
        "timeout": 30,
        "type": "time",
        "unit": "seconds",
        "version": "69bb773dc4a8aec696e4cbe9963baf1eb9025cbb000a96fc7248f6e25b47f84e",
        "warmup_time": -1
    },
    "benchmarks_00_Geometry_time.HighLevel.time_camlos2d": {
        "code": "class HighLevel:\n    def time_camlos2d(self, out):\n        cam = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n        return dcam1d, dcam2d, dpart",
        "min_run_count": 2,
        "name": "benchmarks_00_Geometry_time.HighLevel.time_camlos2d",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.1,
        "setup_cache_key": "/home/didier/Documents/Projects/tofu/tofu/benchmarks/benchmarks_00_Geometry_time.py:39",
        "timeout": 30,
        "type": "time",
        "unit": "seconds",
        "version": "44928fa0168e28968219fd005a106a02b8654f40f791266e8862e0da132aca83",
        "warmup_time": -1
    },
    "benchmarks_00_Geometry_time.HighLevel.time_solidangle_part": {
        "code": "class HighLevel:\n    def time_solidangle_part(self, out):\n        (\n            ptsRZ, sang, indices, reseff,\n        ) = self.conf.calc_solidangle_particle_integrated(**out[2])\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n        return dcam1d, dcam2d, dpart",
        "min_run_count": 2,
        "name": "benchmarks_00_Geometry_time.HighLevel.time_solidangle_part",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.1,
        "setup_cache_key": "/home/didier/Documents/Projects/tofu/tofu/benchmarks/benchmarks_00_Geometry_time.py:39",
        "timeout": 30,
        "type": "time",
        "unit": "seconds",
        "version": "0f18825bd6d665ff91ad8118dd83901ea47ef4b8dcf1542ac355928344ba37d8",
        "warmup_time": -1
    },
    "benchmarks_01_Mesh2D_peakmem.Mesh2D_HighLevel.peakmem_00_mesh2d_rect_bs2": {
        "code": "class Mesh2D_HighLevel:\n    def peakmem_00_mesh2d_rect_bs2(self):\n        self.mesh2d.add_mesh(key='temp', **self.dmesh2drect)\n    \n    # Mesh2D - tri\n    # def peakmem_mesh2dtri_bs1(self):\n        # self.mesh2d.add_mesh(**self.dmesh2dtri)\n\n    def setup(self):\n    \n        # Load a configuration\n        self.conf = tf.load_config('ITER')\n    \n        # input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n        self.cam1d = tf.geom.utils.create_CamLOS1D(**dcam1d)\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n        self.cam2d = tf.geom.utils.create_CamLOS1D(**dcam2d)\n    \n        # prepare input dict for mesh2d\n        self.dmesh2drect = {\n            'crop_poly': self.conf,\n            'res': 0.10,\n            'deg': 2,\n        }\n        # dmesh2dtri = {\n            # 'knots': ,\n            # 'cents': ,\n            # 'key': 'tri1',\n        # }\n        self.mesh2d = tf.data.Mesh2D()\n        self.mesh2d.add_mesh(key='rect1', **self.dmesh2drect)",
        "name": "benchmarks_01_Mesh2D_peakmem.Mesh2D_HighLevel.peakmem_00_mesh2d_rect_bs2",
        "param_names": [],
        "params": [],
        "timeout": 60,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "3b3910f78e24d2c3210370a02d64fba0efdf0f13b827e68884e76a276502e8cf"
    },
    "benchmarks_01_Mesh2D_peakmem.Mesh2D_HighLevel.peakmem_02_geommatrix_rect": {
        "code": "class Mesh2D_HighLevel:\n    def peakmem_02_geommatrix_rect(self):\n        self.mesh2d.add_geometry_matrix(\n            key='rect1-bs2', cam=self.cam1d, res=0.01, verb=False,\n        )\n\n    def setup(self):\n    \n        # Load a configuration\n        self.conf = tf.load_config('ITER')\n    \n        # input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n        self.cam1d = tf.geom.utils.create_CamLOS1D(**dcam1d)\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n        self.cam2d = tf.geom.utils.create_CamLOS1D(**dcam2d)\n    \n        # prepare input dict for mesh2d\n        self.dmesh2drect = {\n            'crop_poly': self.conf,\n            'res': 0.10,\n            'deg': 2,\n        }\n        # dmesh2dtri = {\n            # 'knots': ,\n            # 'cents': ,\n            # 'key': 'tri1',\n        # }\n        self.mesh2d = tf.data.Mesh2D()\n        self.mesh2d.add_mesh(key='rect1', **self.dmesh2drect)",
        "name": "benchmarks_01_Mesh2D_peakmem.Mesh2D_HighLevel.peakmem_02_geommatrix_rect",
        "param_names": [],
        "params": [],
        "timeout": 60,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "5141b4b2f1e51743a8e6c31b3a7e637145964ff4cfac0adf83ae080615b9039f"
    },
    "benchmarks_01_Mesh2D_time.Mesh2D_HighLevel.time_00_mesh2d_rect_bs2": {
        "code": "class Mesh2D_HighLevel:\n    def time_00_mesh2d_rect_bs2(self):\n        self.mesh2d.add_mesh(key='temp', **self.dmesh2drect)\n    \n    # Mesh2D - tri\n    # def time_00_mesh2dtri_bs1(self):\n        # self.mesh2d.add_mesh(**self.dmesh2dtri)\n\n    def setup(self):\n    \n        # Load a configuration\n        self.conf = tf.load_config('ITER')\n    \n        # input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n        self.cam1d = tf.geom.utils.create_CamLOS1D(**dcam1d)\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n        self.cam2d = tf.geom.utils.create_CamLOS1D(**dcam2d)\n    \n        # prepare input dict for mesh2d\n        self.dmesh2drect = {\n            'crop_poly': self.conf,\n            'res': 0.10,\n            'deg': 2,\n        }\n        # dmesh2dtri = {\n            # 'knots': ,\n            # 'cents': ,\n            # 'key': 'tri1',\n        # }\n        self.mesh2d = tf.data.Mesh2D()\n        self.mesh2d.add_mesh(key='rect1', **self.dmesh2drect)",
        "min_run_count": 2,
        "name": "benchmarks_01_Mesh2D_time.Mesh2D_HighLevel.time_00_mesh2d_rect_bs2",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "af12aaceed03f804f9ffbcaa794d3863235326cbc69680c51d1c2d6ac6346045",
        "warmup_time": -1
    },
    "benchmarks_01_Mesh2D_time.Mesh2D_HighLevel.time_02_geommatrix_rect": {
        "code": "class Mesh2D_HighLevel:\n    def time_02_geommatrix_rect(self):\n        self.mesh2d.add_geometry_matrix(\n            key='rect1-bs2', cam=self.cam1d, res=0.01, verb=False,\n        )\n\n    def setup(self):\n    \n        # Load a configuration\n        self.conf = tf.load_config('ITER')\n    \n        # input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n        self.cam1d = tf.geom.utils.create_CamLOS1D(**dcam1d)\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n        self.cam2d = tf.geom.utils.create_CamLOS1D(**dcam2d)\n    \n        # prepare input dict for mesh2d\n        self.dmesh2drect = {\n            'crop_poly': self.conf,\n            'res': 0.10,\n            'deg': 2,\n        }\n        # dmesh2dtri = {\n            # 'knots': ,\n            # 'cents': ,\n            # 'key': 'tri1',\n        # }\n        self.mesh2d = tf.data.Mesh2D()\n        self.mesh2d.add_mesh(key='rect1', **self.dmesh2drect)",
        "min_run_count": 2,
        "name": "benchmarks_01_Mesh2D_time.Mesh2D_HighLevel.time_02_geommatrix_rect",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "3f581575e43c1c4d333ef89f6b051739b5c1a1628290c0592d4449a6f541a476",
        "warmup_time": -1
    },
    "version": 2
}