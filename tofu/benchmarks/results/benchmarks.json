{
    "benchmarks_Geometry.Geometry_HighLevel.peakmem_camlos1d": {
        "code": "class Geometry_HighLevel:\n    def peakmem_camlos1d(self):\n        cam = tf.geom.utils.create_CamLOS1D(**self.dcam1d)\n\n    def setup(self):\n    \n        # Load a configuration\n        self.conf = tf.load_config('ITER')\n    \n        # prepare input dict for a cam1d\n        self.dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        self.dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        self.dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n        }",
        "name": "benchmarks_Geometry.Geometry_HighLevel.peakmem_camlos1d",
        "param_names": [],
        "params": [],
        "timeout": 60,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "81f8b81e177d5998658416016beedaa1a51c2e44e9e755e31ca5bf3e63a5dd1f"
    },
    "benchmarks_Geometry.Geometry_HighLevel.peakmem_camlos2d": {
        "code": "class Geometry_HighLevel:\n    def peakmem_camlos2d(self):\n        cam = tf.geom.utils.create_CamLOS2D(**self.dcam2d)\n\n    def setup(self):\n    \n        # Load a configuration\n        self.conf = tf.load_config('ITER')\n    \n        # prepare input dict for a cam1d\n        self.dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        self.dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        self.dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n        }",
        "name": "benchmarks_Geometry.Geometry_HighLevel.peakmem_camlos2d",
        "param_names": [],
        "params": [],
        "timeout": 60,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "327f7aec4ce98d4bbe05295a201bf6d2663cac0aa6c2f86535c736bd31240d05"
    },
    "benchmarks_Geometry.Geometry_HighLevel.peakmem_solidangle_part": {
        "code": "class Geometry_HighLevel:\n    def peakmem_solidangle_part(self):\n        (\n            ptsRZ, sang, indices, reseff, dax,\n        ) = self.conf.calc_solidangle_particle_integrated(**self.dpart)\n        plt.close('all')\n\n    def setup(self):\n    \n        # Load a configuration\n        self.conf = tf.load_config('ITER')\n    \n        # prepare input dict for a cam1d\n        self.dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        self.dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        self.dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n        }",
        "name": "benchmarks_Geometry.Geometry_HighLevel.peakmem_solidangle_part",
        "param_names": [],
        "params": [],
        "timeout": 60,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "8d28ae91ad8b6882f1a5b5b14cc10644ba81f73e17fc9bb4c283c8d56fb1f79d"
    },
    "benchmarks_Geometry.Geometry_HighLevel.time_camlos1d": {
        "code": "class Geometry_HighLevel:\n    def time_camlos1d(self):\n        cam = tf.geom.utils.create_CamLOS1D(**self.dcam1d)\n\n    def setup(self):\n    \n        # Load a configuration\n        self.conf = tf.load_config('ITER')\n    \n        # prepare input dict for a cam1d\n        self.dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        self.dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        self.dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n        }",
        "min_run_count": 2,
        "name": "benchmarks_Geometry.Geometry_HighLevel.time_camlos1d",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "8ae0cfe43f52e16d81a015a0f091ebf6a2bb6caabce9b513f51452ff8cd53326",
        "warmup_time": -1
    },
    "benchmarks_Geometry.Geometry_HighLevel.time_camlos2d": {
        "code": "class Geometry_HighLevel:\n    def time_camlos2d(self):\n        cam = tf.geom.utils.create_CamLOS2D(**self.dcam2d)\n\n    def setup(self):\n    \n        # Load a configuration\n        self.conf = tf.load_config('ITER')\n    \n        # prepare input dict for a cam1d\n        self.dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        self.dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        self.dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n        }",
        "min_run_count": 2,
        "name": "benchmarks_Geometry.Geometry_HighLevel.time_camlos2d",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "4d2fe98a4e883acfccffee15d89ce8992993cf8e837db071b7199d5923ff4f0a",
        "warmup_time": -1
    },
    "benchmarks_Geometry.Geometry_HighLevel.time_solidangle_part": {
        "code": "class Geometry_HighLevel:\n    def time_solidangle_part(self):\n        (\n            ptsRZ, sang, indices, reseff, dax,\n        ) = self.conf.calc_solidangle_particle_integrated(**self.dpart)\n        plt.close('all')\n\n    def setup(self):\n    \n        # Load a configuration\n        self.conf = tf.load_config('ITER')\n    \n        # prepare input dict for a cam1d\n        self.dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        self.dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        self.dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n        }",
        "min_run_count": 2,
        "name": "benchmarks_Geometry.Geometry_HighLevel.time_solidangle_part",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "6008caafbde93592582ad29fb9cef96c4c2875c578c3c691d2d90796e33a1d0c",
        "warmup_time": -1
    },
    "benchmarks_Mesh2D.Mesh2D_HighLevel.peakmem_00_mesh2d_rect_bs2": {
        "code": "class Mesh2D_HighLevel:\n    def peakmem_00_mesh2d_rect_bs2(self):\n        self.mesh2d.add_mesh(key='temp', **self.dmesh2drect)\n    \n    # Mesh2D - tri\n    # def time_00_mesh2dtri_bs1(self):\n        # self.mesh2d.add_mesh(**self.dmesh2dtri)\n    \n    # def peakmem_mesh2dtri_bs1(self):\n        # self.mesh2d.add_mesh(**self.dmesh2dtri)\n\n    def setup(self):\n    \n        # Load a configuration\n        self.conf = tf.load_config('ITER')\n    \n        # input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n        self.cam1d = tf.geom.utils.create_CamLOS1D(**dcam1d)\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n        self.cam2d = tf.geom.utils.create_CamLOS1D(**dcam2d)\n    \n        # prepare input dict for mesh2d\n        self.dmesh2drect = {\n            'crop_poly': self.conf,\n            'res': 0.10,\n            'deg': 2,\n        }\n        # dmesh2dtri = {\n            # 'knots': ,\n            # 'cents': ,\n            # 'key': 'tri1',\n        # }\n        self.mesh2d = tf.data.Mesh2D()\n        self.mesh2d.add_mesh(key='rect1', **self.dmesh2drect)",
        "name": "benchmarks_Mesh2D.Mesh2D_HighLevel.peakmem_00_mesh2d_rect_bs2",
        "param_names": [],
        "params": [],
        "timeout": 60,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "137a96d8fa0d88198e921a63b99f16e45bd0989cde9fd235574204ddae862b47"
    },
    "benchmarks_Mesh2D.Mesh2D_HighLevel.peakmem_02_geommatrix_rect": {
        "code": "class Mesh2D_HighLevel:\n    def peakmem_02_geommatrix_rect(self):\n        self.mesh2d.add_geometry_matrix(\n            key='rect1-bs2', cam=self.cam1d, res=0.01, verb=False,\n        )\n\n    def setup(self):\n    \n        # Load a configuration\n        self.conf = tf.load_config('ITER')\n    \n        # input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n        self.cam1d = tf.geom.utils.create_CamLOS1D(**dcam1d)\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n        self.cam2d = tf.geom.utils.create_CamLOS1D(**dcam2d)\n    \n        # prepare input dict for mesh2d\n        self.dmesh2drect = {\n            'crop_poly': self.conf,\n            'res': 0.10,\n            'deg': 2,\n        }\n        # dmesh2dtri = {\n            # 'knots': ,\n            # 'cents': ,\n            # 'key': 'tri1',\n        # }\n        self.mesh2d = tf.data.Mesh2D()\n        self.mesh2d.add_mesh(key='rect1', **self.dmesh2drect)",
        "name": "benchmarks_Mesh2D.Mesh2D_HighLevel.peakmem_02_geommatrix_rect",
        "param_names": [],
        "params": [],
        "timeout": 60,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "5141b4b2f1e51743a8e6c31b3a7e637145964ff4cfac0adf83ae080615b9039f"
    },
    "benchmarks_Mesh2D.Mesh2D_HighLevel.time_00_mesh2d_rect_bs2": {
        "code": "class Mesh2D_HighLevel:\n    def time_00_mesh2d_rect_bs2(self):\n        self.mesh2d.add_mesh(key='temp', **self.dmesh2drect)\n\n    def setup(self):\n    \n        # Load a configuration\n        self.conf = tf.load_config('ITER')\n    \n        # input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n        self.cam1d = tf.geom.utils.create_CamLOS1D(**dcam1d)\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n        self.cam2d = tf.geom.utils.create_CamLOS1D(**dcam2d)\n    \n        # prepare input dict for mesh2d\n        self.dmesh2drect = {\n            'crop_poly': self.conf,\n            'res': 0.10,\n            'deg': 2,\n        }\n        # dmesh2dtri = {\n            # 'knots': ,\n            # 'cents': ,\n            # 'key': 'tri1',\n        # }\n        self.mesh2d = tf.data.Mesh2D()\n        self.mesh2d.add_mesh(key='rect1', **self.dmesh2drect)",
        "min_run_count": 2,
        "name": "benchmarks_Mesh2D.Mesh2D_HighLevel.time_00_mesh2d_rect_bs2",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "9f03bcacebbf41e477179a3a97f8faca0e10b8c237ae122b1b607642d6cb4715",
        "warmup_time": -1
    },
    "benchmarks_Mesh2D.Mesh2D_HighLevel.time_02_geommatrix_rect": {
        "code": "class Mesh2D_HighLevel:\n    def time_02_geommatrix_rect(self):\n        self.mesh2d.add_geometry_matrix(\n            key='rect1-bs2', cam=self.cam1d, res=0.01, verb=False,\n        )\n\n    def setup(self):\n    \n        # Load a configuration\n        self.conf = tf.load_config('ITER')\n    \n        # input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n        self.cam1d = tf.geom.utils.create_CamLOS1D(**dcam1d)\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 400,\n            'sensor_size': 0.2,\n            'config': self.conf,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n        self.cam2d = tf.geom.utils.create_CamLOS1D(**dcam2d)\n    \n        # prepare input dict for mesh2d\n        self.dmesh2drect = {\n            'crop_poly': self.conf,\n            'res': 0.10,\n            'deg': 2,\n        }\n        # dmesh2dtri = {\n            # 'knots': ,\n            # 'cents': ,\n            # 'key': 'tri1',\n        # }\n        self.mesh2d = tf.data.Mesh2D()\n        self.mesh2d.add_mesh(key='rect1', **self.dmesh2drect)",
        "min_run_count": 2,
        "name": "benchmarks_Mesh2D.Mesh2D_HighLevel.time_02_geommatrix_rect",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "3f581575e43c1c4d333ef89f6b051739b5c1a1628290c0592d4449a6f541a476",
        "warmup_time": -1
    },
    "version": 2
}